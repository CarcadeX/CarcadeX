plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.codearte.nexus-staging" version "0.30.0"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = "io.github.iredtea"
archivesBaseName = "carcadex"
def versionGlobal = project.findProperty('version')
version = versionGlobal

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "sonatype"
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }
}

dependencies {
    compileOnly("com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT")

    /*
    compileOnly("com.github.cryptomorin:XSeries:9.2.0") //add to libs
    compileOnly("dev.triumphteam:triumph-gui:3.1.2") //impl?
    compileOnly("me.mattstudios.utils:matt-framework:1.4.6")

    compileOnly(kotlin("stdlib", KotlinCompilerVersion.VERSION)) //add to libs
    compileOnly("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1") //add to libs

    compileOnly("org.projectlombok:lombok:1.18.22")
    annotationProcessor("org.projectlombok:lombok:1.18.22")

    compileOnly("com.google.inject:guice:5.1.0") //add to libs
    compileOnly("com.google.inject.extensions:guice-assistedinject:5.1.0") //add to libs

    //exposed
    compileOnly("org.jetbrains.exposed:exposed-core:0.40.1")
    compileOnly("org.jetbrains.exposed:exposed-dao:0.40.1")
    compileOnly("org.jetbrains.exposed:exposed-jdbc:0.40.1")

     */
    compileOnly("org.projectlombok:lombok:1.18.22")
    annotationProcessor("org.projectlombok:lombok:1.18.22")


    implementation project(":messages")
    implementation project(":kotlin")
    implementation project(":services")
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'carcadex'
            groupId = 'io.github.iredtea'
            version = versionGlobal
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                artifactId = "carcadex"
                groupId = "io.github.iredtea"
                version = version
                name = 'carcadex'
                description = 'carcadex'
                url = 'https://github.com/iRedTea/CarcadeX'

                licenses {
                    license {
                        name = "GNU General Public License v3.0"
                        url = "https://www.gnu.org/licenses/gpl-3.0.en.html"
                    }
                }
                developers {
                    developer {
                        id = 'itzRedTea'
                        name = 'Red Tea'
                        email = 'red__tea@outlook.com'
                    }
                }
                scm {
                    connection = "scm:https://github.com/iRedTea/CarcadeX.git"
                    developerConnection = "git@github.com:iRedTea/CarcadeX.git"
                    url = 'https://github.com/iRedTea/CarcadeX'
                }
            }

        }
    }



    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = "itzRedTea"
                password = project.findProperty('password')
            }
        }

    }
}




nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = "io.github.iredtea"
    username = "itzRedTea"
    password = project.findProperty('password')

}


signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

shadowJar {
    archiveBaseName.set('carcadex-' + versionGlobal)
    archiveClassifier.set('')
    archiveVersion.set('')
}

